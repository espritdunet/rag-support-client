"""
Nginx security configuration for RAG Support Client
Centralizes security headers, rate limiting, and other protective measures.

Author: Oliver Marshall
Date: December 15, 2024
"""

# ------------------------------
# Security Headers
# ------------------------------

# HSTS (uncomment if SSL is enabled)
# add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

# Prevent clickjacking attacks
add_header X-Frame-Options "SAMEORIGIN" always;

# Prevent MIME type sniffing
add_header X-Content-Type-Options "nosniff" always;

# XSS Protection
add_header X-XSS-Protection "1; mode=block" always;

# Referrer Policy
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Content Security Policy
add_header Content-Security-Policy "default-src 'self' http: https: ws: wss: data: blob: 'unsafe-inline'; frame-ancestors 'self'; upgrade-insecure-requests;" always;

# Permissions Policy
add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=()" always;

# ------------------------------
# Rate Limiting
# ------------------------------

# Define rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=ui_limit:10m rate=30r/s;

# Rate limiting status code
limit_req_status 429;

# ------------------------------
# Bot Protection
# ------------------------------

# Block common bot and crawler user agents
map $http_user_agent $bad_bot {
    default 0;
    ~*(curl|wget|python|scrapy|bot|crawler) 1;
}

# Block requests from bad bots
if ($bad_bot) {
    return 403;
}

# ------------------------------
# File Access Restrictions
# ------------------------------

# Deny access to hidden files and directories
location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
}

# Deny access to backup and source files
location ~ ~$ {
    deny all;
    access_log off;
    log_not_found off;
}

# ------------------------------
# Request Method Restrictions
# ------------------------------

# Restrict HTTP methods
if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$) {
    return 405;
}

# ------------------------------
# Buffer Overflow Protection
# ------------------------------

# Client body size limits
client_body_buffer_size 128k;
client_max_body_size 10m;

# Buffer size for headers
client_header_buffer_size 1k;
large_client_header_buffers 4 4k;

# ------------------------------
# Timeouts
# ------------------------------

# Client timeouts
client_body_timeout 10;
client_header_timeout 10;
keepalive_timeout 30;
send_timeout 10;

# ------------------------------
# SSL Configuration (when enabled)
# ------------------------------

# SSL buffer size
ssl_buffer_size 8k;

# OCSP Stapling
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;

# DH parameters
ssl_dhparam /etc/nginx/dhparam.pem;

# ------------------------------
# DoS Protection
# ------------------------------

# Slow HTTP attack protection
proxy_connect_timeout 60s;
proxy_send_timeout 60s;
proxy_read_timeout 60s;
proxy_request_buffering on;

# ------------------------------
# Logging Configuration
# ------------------------------

# Define custom log format with security relevant fields
log_format security '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    '"$http_x_forwarded_for" "$request_id"';

# Enable custom logging
access_log /var/log/nginx/security.log security;

# ------------------------------
# Additional Security Measures
# ------------------------------

# Disable server tokens
server_tokens off;

# Enable XSS filter built into browsers
add_header X-XSS-Protection "1; mode=block" always;

# Prevent browser from rendering page if XSS attack detected
add_header X-Content-Type-Options "nosniff" always;

# Enable cross-origin resource sharing only for allowed domains
add_header Access-Control-Allow-Origin $http_origin;
add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
add_header Access-Control-Allow-Headers "Authorization, Content-Type";
add_header Access-Control-Allow-Credentials "true";

# ------------------------------
# WAF Rules (Basic)
# ------------------------------

# Block SQL injections
if ($query_string ~* "union.*select.*\(") {
    return 403;
}

# Block file injections
if ($query_string ~* "[a-zA-Z0-9_]=http://") {
    return 403;
}

# Block common exploits
if ($query_string ~* "(<|%3C).*script.*(>|%3E)") {
    return 403;
}
